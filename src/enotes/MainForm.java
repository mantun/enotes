/*
 * (c) 2009. Ivan Voras <ivoras@fer.hr>
 */


/*
 * fmain.java
 *
 * Created on 2010.01.15, 12:44:24
 */

package enotes;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import javax.swing.text.Element;

/**
 *
 * @author ivoras
 */
public class MainForm extends javax.swing.JFrame {

    static final int OPT_SAVE = 1;
    static final int OPT_NOSAVE = 2;
    static final int OPT_CANCEL = 3;

    private DocMetadata docm = new DocMetadata();
    int tp_line, tp_col;

    /** Creates new form fmain */
    public MainForm() {
        initComponents();
        updateTitle();
        tp.addCaretListener( new CaretListener(){
          public void caretUpdate(CaretEvent e ){
              Document doc = tp.getDocument();
                Element root = doc.getDefaultRootElement();
                int dot = e.getDot();
                tp_line = root.getElementIndex( dot );
                tp_col = dot - root.getElement( tp_line ).getStartOffset();
                updateCaretStatus();
            }
          } );

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbCaret = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tp = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Encrypted Notes");
        setMinimumSize(new java.awt.Dimension(400, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        jPanel1.setLayout(new java.awt.BorderLayout());

        lbCaret.setText("00:00");
        jPanel1.add(lbCaret, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        tp.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        tp.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                tpCaretPositionChanged(evt);
            }
        });
        tp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tpKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tp);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNew.setText("New document...");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        jMenu1.add(miNew);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open...");
        jMenu1.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        jMenu1.add(miSave);

        miSaveAs.setText("Save As...");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveAs);
        jMenu1.add(jSeparator1);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        if (!canExit())
            return;
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_miExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!canExit())
            return;
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        if (checkSave() == OPT_CANCEL)
            return;
        tp.setText("");
        docm = new DocMetadata();
        updateTitle();
    }//GEN-LAST:event_miNewActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        if (docm.filename == null) {
            miSaveAsActionPerformed(evt);
            return;
        }
    }//GEN-LAST:event_miSaveActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_miSaveAsActionPerformed

    private void tpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpKeyTyped
        if (!docm.modified) {
            docm.modified = true;
            updateTitle();
        }
    }//GEN-LAST:event_tpKeyTyped

    private void tpCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tpCaretPositionChanged
        updateCaretStatus();
    }//GEN-LAST:event_tpCaretPositionChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbCaret;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JTextPane tp;
    // End of variables declaration//GEN-END:variables


    private boolean canExit() {
        return checkSave() != OPT_CANCEL;
    }
    

    private void updateTitle() {
        String fn = docm.filename;
        if (fn == null)
            fn = "*New Document*";
        if (docm.modified)
            fn += " [modified]";
        this.setTitle(fn + " - Encrypted Notepad");
    }


    private void updateCaretStatus() {
        docm.caretPosition = tp.getCaretPosition();
        lbCaret.setText(String.format("L:%d C:%s", tp_line, tp_col));
    }


    /**
     * Returns true if the document was saved or the user said he doesn't want
     * to save it.
     *
     * @return
     */
    private int checkSave() {
        if (!docm.modified)
            return OPT_NOSAVE;

        int opt = JOptionPane.showConfirmDialog(this, "Do you want to save the file "+docm.filename, "Save file?", 
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opt == JOptionPane.CANCEL_OPTION)
            return OPT_CANCEL;
        if (opt == JOptionPane.NO_OPTION)
            return OPT_NOSAVE;

        JFileChooser fch = new JFileChooser();
        fch.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File pathname) {
                String name = pathname.getName().toLowerCase();
                return name.endsWith(".etxt");
            }
            @Override
            public String getDescription() {
                return "Encrypted Notepad files (*.etxt)";
            }
        });
        fch.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String name = f.getName().toLowerCase();
                return name.endsWith(".txt");
            }
            @Override
            public String getDescription() {
                return "Plain text files (*.txt)";
            }
        });
        fch.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return true;
            }
            @Override
            public String getDescription() {
                return "All files (*.*)";
            }
        });

        int ret = fch.showSaveDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                return doSave(fch.getSelectedFile()) ? OPT_SAVE : OPT_CANCEL;
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                return OPT_CANCEL;
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                return OPT_CANCEL;
            }
        } else
            return OPT_NOSAVE;
    }


    private boolean doSave(File f) throws FileNotFoundException, IOException {
        assert(docm.key != null);
        
        FileOutputStream fout = new FileOutputStream(f);
        BufferedOutputStream sout = new BufferedOutputStream(fout);

        sout.write(DocMetadata.SIGNATURE);

        sout.close();
        fout.close();
        return true;
    }
}
